generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or the database provider you are using
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  password         String
  role             Role
  admin            Admin?
  parent           Parent?
  sentMessages     Message[] @relation("Sender")
  receivedMessages Message[] @relation("Receiver")
}

model Admin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model Parent {
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
  child  Child[]
}

model Child {
  id         Int          @id @default(autoincrement())
  name       String
  studentId  String       @unique
  phone      String
  birthDate  DateTime
  gender     String
  address    String
  city       String
  postalCode String
  country    String
  parentId   Int
  parent     Parent       @relation(fields: [parentId], references: [id])
  classId    Int
  class      Class        @relation(fields: [classId], references: [id])
  progress   Progress[]
  attendance Attendance[]
}

model Teacher {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique
  phone      String
  birthDate  DateTime
  gender     String
  address    String
  city       String
  postalCode String
  country    String
  attendance Attendance[]
}

model Class {
  id              Int              @id @default(autoincrement())
  name            String // Example: "Class A"
  ageGroup        String // Example: "5-6 Years"
  semesterId      Int
  semester        Semester         @relation(fields: [semesterId], references: [id])
  children        Child[]
  coreActivities  CoreActivity[]
  learningModules LearningModule[] @relation("ClassLearningModules")
}

model CoreActivity {
  id               Int            @id @default(autoincrement())
  title            String
  description      String?
  day              String
  week             Int
  classId          Int
  class            Class          @relation(fields: [classId], references: [id])
  learningModuleId Int
  learningModule   LearningModule @relation(fields: [learningModuleId], references: [id])
  completed        Boolean
}

model Attendance {
  id             Int          @id @default(autoincrement())
  date           DateTime
  type           String // "child" or "teacher"
  childId        Int? // Nullable for teacher attendance
  teacherId      Int? // Nullable for child attendance
  status         String // "present", "absent", "excused"
  pengantar      String? // optional who accompanied
  penjemput      String? // optional who picked up
  arrivalTime    DateTime?
  departureTime  DateTime?
  remarks        String?
  child          Child?       @relation(fields: [childId], references: [id])
  teacher        Teacher?     @relation(fields: [teacherId], references: [id])
  semesterId     Int
  semester       Semester     @relation(fields: [semesterId], references: [id])
  academicYearId Int
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
}

model Progress {
  id         Int              @id @default(autoincrement())
  date       DateTime
  moralValue String
  motorGross String
  motorFine  String
  cognitive  String
  language   String
  social     String
  reflection String
  comments   String?
  childId    Int
  child      Child            @relation(fields: [childId], references: [id])
  details    ProgressDetail[]

  semesterId     Int
  semester       Semester     @relation(fields: [semesterId], references: [id])
  academicYearId Int
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
}

model ProgressDetail {
  id         Int                 @id @default(autoincrement())
  category   String // containing moral value, motorGross, etc.
  progressId Int
  progress   Progress            @relation(fields: [progressId], references: [id])
  subDetails SubCategoryDetail[]
}

model SubCategoryDetail {
  id               Int            @id @default(autoincrement())
  progressDetailId Int
  subCategory      String
  status           String
  progressDetail   ProgressDetail @relation(fields: [progressDetailId], references: [id])
}

model Document {
  id    Int       @id @default(autoincrement())
  type  String // "gallery", "attendanceHistory", "menuList"
  title String?
  link  String?
  day   String?
  date  DateTime?
  menu  String?

  semesterId     Int
  semester       Semester     @relation(fields: [semesterId], references: [id])
  academicYearId Int
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
}

model AcademicCalendar {
  id          Int      @id @default(autoincrement())
  date        DateTime
  activity    String
  description String
  completed   Boolean
}

model AcademicYear {
  id         Int          @id @default(autoincrement())
  year       String // Example: "2025/2026"
  semesters  Semester[]
  Attendance Attendance[]
  Progress   Progress[]
  Document   Document[]
}

model Semester {
  id              Int              @id @default(autoincrement())
  number          Int // Example: 1 for Semester 1, 2 for Semester 2
  academicYearId  Int
  academicYear    AcademicYear     @relation(fields: [academicYearId], references: [id])
  weeks           Int // Example: 16 weeks per semester
  learningModules LearningModule[]
  classes         Class[]
  attendances     Attendance[]
  progresses      Progress[]
  documents       Document[]
}

model LearningModule {
  id            Int            @id @default(autoincrement())
  title         String // Example: "My Family"
  description   String?
  durationWeeks Int // Example: 3 weeks
  pancasilaDesc String
  facilityDesc  String
  conceptMap    String // URL or path to image
  semesterId    Int
  semester      Semester       @relation(fields: [semesterId], references: [id])
  learningGoals LearningGoal[]
  activities    CoreActivity[]
  classes       Class[]        @relation("ClassLearningModules")
}

model LearningGoal {
  id          Int            @id @default(autoincrement())
  name        String // Goal name
  description String // Goal description
  moduleId    Int
  module      LearningModule @relation(fields: [moduleId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  date       DateTime
  content    String
  senderId   Int
  sender     User     @relation(fields: [senderId], references: [id], name: "Sender")
  receiverId Int
  receiver   User     @relation(fields: [receiverId], references: [id], name: "Receiver")
}

enum Role {
  ADMIN
  PARENT
}
